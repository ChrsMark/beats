This is the remote_write metricset of the module prometheus. This metricset can receive metrics from a Prometheus server that
has configureed https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write[remote_write] setting accordingly, for instance:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
remote_write:
  - url: "http://localhost:9201/write"
------------------------------------------------------------------------------

TIP: It is recommended to carefully choose the https://prometheus.io/docs/practices/remote_write/#parameters[parameters]
of remote_write configuration so as to tune the queue according to each specific case and system's characteristics. More
specifically, `max_shards` option sets the max number of parallelism with which Prometheus will try to send metrics to
the remote storage. The default value of this is `1000`, which means that in case of Prometheus falls behind the
remote storage the number of shards will be increased up to `1000` to increase thoughput. This can happen in cases
of network delays for instance where the whole queue faces issues to consume metrics and finally send metrics to Elasticsearch.
However increasing the number of parallelism, means that we increase the number of parallel connections from Prometheus
to Metricbeat. This can lead to resource saturation if the system on which Metricbeat runs has a limit in `fd` (file descriptors)
which is lower than `max_shards`. This can be resolved either by setting a higher `fd` limit in the system with `ulimit -n 2048`
or by setting a lower value for `max_shards`.


Metrics sent to the http endpoint will be put by default under the `prometheus.metrics` prefix with their labels under `prometheus.labels`.
A basic configuration would look like:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
- module: prometheus
  metricsets: ["remote_write"]
  host: "localhost"
  port: "9201"
------------------------------------------------------------------------------



Also consider using secure settings for the server, configuring the module with TLS/SSL as shown:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
- module: prometheus
  metricsets: ["remote_write"]
  host: "localhost"
  ssl.certificate: "/etc/pki/server/cert.pem"
  ssl.key: "/etc/pki/server/cert.key"
  port: "9201"
------------------------------------------------------------------------------

and on Prometheus side:

["source","yaml",subs="attributes"]
------------------------------------------------------------------------------
remote_write:
  - url: "https://localhost:9201/write"
    tls_config:
        cert_file: "/etc/prometheus/my_key.pem"
        key_file: "/etc/prometheus/my_key.key"
        # Disable validation of the server certificate.
        #insecure_skip_verify: true
------------------------------------------------------------------------------
